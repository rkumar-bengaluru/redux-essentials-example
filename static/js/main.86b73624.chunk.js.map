{"version":3,"sources":["features/posts/PostAuthor.js","features/posts/TimeAgo.js","api/client.js","features/posts/postsSlice.js","features/posts/ReactionButtons.js","features/posts/PostsList.js","features/posts/AddPostForm.js","logo.svg","features/counter/counterAPI.js","features/counter/counterSlice.js","features/counter/Counter.js","features/counter/index.js","features/posts/SinglePostPage.js","features/posts/EditPostForm.js","app/NavBar.js","App.js","api/server.js","features/users/usersSlice.js","app/store.js","index.js","features/counter/Counter.module.css"],"names":["PostAuthor","userId","author","useSelector","state","users","find","user","id","name","TimeAgo","timestamp","timeAgo","date","parseISO","timePeriod","formatDistanceToNow","title","client","endpoint","a","body","customConfig","headers","config","method","JSON","stringify","window","fetch","response","json","data","ok","console","log","Error","statusText","Promise","reject","message","get","post","fetchPosts","createAsyncThunk","posts","addNewPost","initialPost","postsSlice","createSlice","initialState","status","error","reducers","reactionAdded","action","payload","postId","reaction","existingPost","reactions","postUpdated","content","extraReducers","pending","fulfilled","concat","rejected","push","actions","postAdded","selectAllPosts","selectPostById","reactionEmoji","thumbsUp","hooray","heart","rocket","eyes","ReactionButtons","dispatch","useDispatch","reactionButtons","Object","entries","map","emoji","type","className","onClick","PostExcerpt","substring","to","PostsList","postStatus","useEffect","slice","sort","b","localeCompare","AddPostForm","useState","setTitle","setContent","setUserId","addRequestStatus","setAddRequestStatus","canSave","every","Boolean","onSavePostClicked","resultAction","unwrapResult","usersOptions","value","htmlFor","placeholder","onChange","e","target","disabled","fetchCount","amount","resolve","setTimeout","incrementAsync","counterSlice","increment","decrement","incrementByAmount","builder","addCase","selectCount","counter","Counter","count","incrementAmount","setIncrementAmount","incrementValue","Number","styles","row","button","textbox","asyncButton","getState","CounterApp","src","logo","alt","href","rel","SinglePostPage","match","params","EditPostForm","history","useHistory","Navbar","App","seedDate","exact","path","render","Fragment","component","fetchUsers","usersSlice","configureStore","reducer","counterReducer","postsReducer","usersReducer","IdSerializer","RestSerializer","extend","serializeIds","rng","seedrandom","randomSeedString","localStorage","getItem","getRandomInt","min","max","Math","ceil","floor","Date","toISOString","setItem","setRandom","faker","seed","getTime","randomFromArray","array","length","notificationTemplates","Server","routes","this","namespace","timing","resource","server","schema","req","normalizedRequestAttrs","create","comments","pastDate","numNotifications","now","queryParams","since","valueOf","setMinutes","getMinutes","notifications","Array","db","template","nanoid","between","read","isNew","models","Model","hasMany","belongsTo","comment","notification","factories","Factory","firstName","lastName","findName","username","internet","userName","afterCreate","createList","sentence","recent","article","association","past","text","paragraph","serializers","seeds","store","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.86b73624.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nexport const PostAuthor = ({ userId }) => {\r\n    const author = useSelector((state) =>\r\n        state.users.find((user) => user.id === userId)\r\n    )\r\n\r\n    return <span>by {author ? author.name : 'Unknown author'}</span>\r\n}\r\n","import React from 'react'\r\nimport { parseISO, formatDistanceToNow } from 'date-fns'\r\n\r\nexport const TimeAgo = ({ timestamp }) => {\r\n    let timeAgo = ''\r\n    if (timestamp) {\r\n        const date = parseISO(timestamp)\r\n        const timePeriod = formatDistanceToNow(date)\r\n        timeAgo = `${timePeriod} ago`\r\n    }\r\n\r\n    return (\r\n        <span title={timestamp}>\r\n            &nbsp; <i>{timeAgo}</i>\r\n        </span>\r\n    )\r\n}\r\n","// A tiny wrapper around fetch(), borrowed from\r\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\r\n\r\nexport async function client(endpoint, { body, ...customConfig } = {}) {\r\n    const headers = { 'Content-Type': 'application/json' }\r\n\r\n    const config = {\r\n        method: body ? 'POST' : 'GET',\r\n        ...customConfig,\r\n        headers: {\r\n            ...headers,\r\n            ...customConfig.headers,\r\n        },\r\n    }\r\n\r\n    if (body) {\r\n        config.body = JSON.stringify(body)\r\n    }\r\n\r\n    let data\r\n    try {\r\n        const response = await window.fetch(endpoint, config)\r\n        data = await response.json()\r\n        if (response.ok) {\r\n            console.log(data);\r\n            return data\r\n        }\r\n        throw new Error(response.statusText)\r\n    } catch (err) {\r\n        return Promise.reject(err.message ? err.message : data)\r\n    }\r\n}\r\n\r\nclient.get = function (endpoint, customConfig = {}) {\r\n    return client(endpoint, { ...customConfig, method: 'GET' })\r\n}\r\n\r\nclient.post = function (endpoint, body, customConfig = {}) {\r\n    return client(endpoint, { ...customConfig, body })\r\n}\r\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport { client } from '../../api/client'\r\n\r\nconst initialState = {\r\n    posts: [],\r\n    status: 'idle',\r\n    error: null,\r\n}\r\n\r\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\r\n    const response = await client.get('/fakeApi/posts')\r\n    return response.posts\r\n})\r\n\r\nexport const addNewPost = createAsyncThunk(\r\n    'posts/addNewPost',\r\n    async (initialPost) => {\r\n        const response = await client.post('/fakeApi/posts', { post: initialPost })\r\n        return response.post\r\n    }\r\n)\r\n\r\nconst postsSlice = createSlice({\r\n    name: 'posts',\r\n    initialState,\r\n    reducers: {\r\n        reactionAdded(state, action) {\r\n            const { postId, reaction } = action.payload\r\n            const existingPost = state.posts.find((post) => post.id === postId)\r\n            if (existingPost) {\r\n                existingPost.reactions[reaction]++\r\n            }\r\n        },\r\n        postUpdated(state, action) {\r\n            const { id, title, content } = action.payload\r\n            const existingPost = state.posts.find((post) => post.id === id)\r\n            if (existingPost) {\r\n                existingPost.title = title\r\n                existingPost.content = content\r\n            }\r\n        },\r\n    },\r\n    extraReducers: {\r\n        [fetchPosts.pending]: (state, action) => {\r\n            state.status = 'loading'\r\n        },\r\n        [fetchPosts.fulfilled]: (state, action) => {\r\n            state.status = 'succeeded'\r\n            // Add any fetched posts to the array\r\n            state.posts = state.posts.concat(action.payload)\r\n        },\r\n        [fetchPosts.rejected]: (state, action) => {\r\n            state.status = 'failed'\r\n            state.error = action.payload\r\n        },\r\n        [addNewPost.fulfilled]: (state, action) => {\r\n            state.posts.push(action.payload)\r\n        },\r\n    },\r\n})\r\n\r\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions\r\n\r\nexport default postsSlice.reducer\r\n\r\nexport const selectAllPosts = (state) => state.posts.posts\r\n\r\nexport const selectPostById = (state, postId) =>\r\n    state.posts.posts.find((post) => post.id === postId)\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport { reactionAdded } from './postsSlice'\r\n\r\nconst reactionEmoji = {\r\n    thumbsUp: '👍',\r\n    hooray: '🎉',\r\n    heart: '❤️',\r\n    rocket: '🚀',\r\n    eyes: '👀',\r\n}\r\n\r\nexport const ReactionButtons = ({ post }) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const reactionButtons = Object.entries(reactionEmoji).map(([name, emoji]) => {\r\n        return (\r\n            <button\r\n                key={name}\r\n                type=\"button\"\r\n                className=\"muted-button reaction-button\"\r\n                onClick={() =>\r\n                    dispatch(reactionAdded({ postId: post.id, reaction: name }))\r\n                }\r\n            >\r\n                {emoji} {post.reactions[name]}\r\n            </button>\r\n        )\r\n    })\r\n\r\n    return <div>{reactionButtons}</div>\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { PostAuthor } from './PostAuthor'\r\nimport { TimeAgo } from './TimeAgo'\r\nimport { ReactionButtons } from './ReactionButtons'\r\nimport { selectAllPosts, fetchPosts } from './postsSlice'\r\n\r\nconst PostExcerpt = ({ post }) => {\r\n    return (\r\n        <article className=\"post-excerpt\" key={post.id}>\r\n            <h3>{post.title}</h3>\r\n            <div>\r\n                <PostAuthor userId={post.user} />\r\n                <TimeAgo timestamp={post.date} />\r\n            </div>\r\n            <p className=\"post-content\">{post.content.substring(0, 100)}</p>\r\n\r\n            <ReactionButtons post={post} />\r\n            <Link to={`/posts/${post.id}`} className=\"button muted-button\">\r\n                View Post\r\n            </Link>\r\n        </article>\r\n    )\r\n}\r\n\r\nexport const PostsList = () => {\r\n    const dispatch = useDispatch()\r\n    const posts = useSelector(selectAllPosts)\r\n\r\n    const postStatus = useSelector((state) => state.posts.status)\r\n    const error = useSelector((state) => state.posts.error)\r\n\r\n    useEffect(() => {\r\n        if (postStatus === 'idle') {\r\n            dispatch(fetchPosts())\r\n        }\r\n    }, [postStatus, dispatch])\r\n\r\n    let content\r\n\r\n    if (postStatus === 'loading') {\r\n        content = <div className=\"loader\">Loading...</div>\r\n    } else if (postStatus === 'succeeded') {\r\n        // Sort posts in reverse chronological order by datetime string\r\n        const orderedPosts = posts\r\n            .slice()\r\n            .sort((a, b) => b.date.localeCompare(a.date))\r\n\r\n        content = orderedPosts.map((post) => (\r\n            <PostExcerpt key={post.id} post={post} />\r\n        ))\r\n    } else if (postStatus === 'error') {\r\n        content = <div>{error}</div>\r\n    }\r\n\r\n    return (\r\n        <section className=\"posts-list\">\r\n            <h2>Posts</h2>\r\n            {content}\r\n        </section>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { unwrapResult } from '@reduxjs/toolkit'\r\n\r\nimport { addNewPost } from './postsSlice'\r\n\r\nexport const AddPostForm = () => {\r\n    const [title, setTitle] = useState('')\r\n    const [content, setContent] = useState('')\r\n    const [userId, setUserId] = useState('')\r\n    const [addRequestStatus, setAddRequestStatus] = useState('idle')\r\n\r\n    const dispatch = useDispatch()\r\n    const users = useSelector((state) => state.users)\r\n\r\n    const onTitleChanged = (e) => setTitle(e.target.value)\r\n    const onContentChanged = (e) => setContent(e.target.value)\r\n    const onAuthorChanged = (e) => setUserId(e.target.value)\r\n\r\n    const canSave =\r\n        [title, content, userId].every(Boolean) && addRequestStatus === 'idle'\r\n\r\n    const onSavePostClicked = async () => {\r\n        if (canSave) {\r\n            try {\r\n                setAddRequestStatus('pending')\r\n                const resultAction = await dispatch(\r\n                    addNewPost({ title, content, user: userId })\r\n                )\r\n                unwrapResult(resultAction)\r\n                setTitle('')\r\n                setContent('')\r\n                setUserId('')\r\n            } catch (err) {\r\n                console.error('Failed to save the post: ', err)\r\n            } finally {\r\n                setAddRequestStatus('idle')\r\n            }\r\n        }\r\n    }\r\n\r\n    const usersOptions = users.map((user) => (\r\n        <option key={user.id} value={user.id}>\r\n            {user.name}\r\n        </option>\r\n    ))\r\n\r\n    return (\r\n        <section>\r\n            <h2>Add a New Post</h2>\r\n            <form>\r\n                <label htmlFor=\"postTitle\">Post Title:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"postTitle\"\r\n                    name=\"postTitle\"\r\n                    placeholder=\"What's on your mind?\"\r\n                    value={title}\r\n                    onChange={onTitleChanged}\r\n                />\r\n                <label htmlFor=\"postAuthor\">Author:</label>\r\n                <select id=\"postAuthor\" value={userId} onChange={onAuthorChanged}>\r\n                    <option value=\"\"></option>\r\n                    {usersOptions}\r\n                </select>\r\n                <label htmlFor=\"postContent\">Content:</label>\r\n                <textarea\r\n                    id=\"postContent\"\r\n                    name=\"postContent\"\r\n                    value={content}\r\n                    onChange={onContentChanged}\r\n                />\r\n                <button type=\"button\" onClick={onSavePostClicked} disabled={!canSave}>\r\n                    Save Post\r\n                </button>\r\n            </form>\r\n        </section>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.b2e5a01e.svg\";","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  decrement,\n  increment,\n  incrementByAmount,\n  incrementAsync,\n  incrementIfOdd,\n  selectCount,\n} from './counterSlice';\nimport styles from './Counter.module.css';\n\nexport function Counter() {\n  const count = useSelector(selectCount);\n  const dispatch = useDispatch();\n  const [incrementAmount, setIncrementAmount] = useState('2');\n\n  const incrementValue = Number(incrementAmount) || 0;\n\n  return (\n    <div>\n      <div className={styles.row}>\n        <button\n          className={styles.button}\n          aria-label=\"Decrement value\"\n          onClick={() => dispatch(decrement())}\n        >\n          -\n        </button>\n        <span className={styles.value}>{count}</span>\n        <button\n          className={styles.button}\n          aria-label=\"Increment value\"\n          onClick={() => dispatch(increment())}\n        >\n          +\n        </button>\n      </div>\n      <div className={styles.row}>\n        <input\n          className={styles.textbox}\n          aria-label=\"Set increment amount\"\n          value={incrementAmount}\n          onChange={(e) => setIncrementAmount(e.target.value)}\n        />\n        <button\n          className={styles.button}\n          onClick={() => dispatch(incrementByAmount(incrementValue))}\n        >\n          Add Amount\n        </button>\n        <button\n          className={styles.asyncButton}\n          onClick={() => dispatch(incrementAsync(incrementValue))}\n        >\n          Add Async\n        </button>\n        <button\n          className={styles.button}\n          onClick={() => dispatch(incrementIfOdd(incrementValue))}\n        >\n          Add If Odd\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\r\nimport logo from '../../logo.svg';\r\nimport { Counter } from './Counter';\r\nimport '../../App.css';\r\n\r\nexport const CounterApp = () => {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <Counter />\r\n          <p>\r\n            Edit <code>src/App.js</code> and save to reload.\r\n          </p>\r\n          <span>\r\n            <span>Learn </span>\r\n            <a\r\n              className=\"App-link\"\r\n              href=\"https://reactjs.org/\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              React\r\n            </a>\r\n            <span>, </span>\r\n            <a\r\n              className=\"App-link\"\r\n              href=\"https://redux.js.org/\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Redux\r\n            </a>\r\n            <span>, </span>\r\n            <a\r\n              className=\"App-link\"\r\n              href=\"https://redux-toolkit.js.org/\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Redux Toolkit\r\n            </a>\r\n            ,<span> and </span>\r\n            <a\r\n              className=\"App-link\"\r\n              href=\"https://react-redux.js.org/\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              React Redux\r\n            </a>\r\n          </span>\r\n        </header>\r\n      </div>\r\n    );\r\n  }","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { PostAuthor } from './PostAuthor'\r\nimport { TimeAgo } from './TimeAgo'\r\nimport { ReactionButtons } from './ReactionButtons'\r\nimport { selectPostById } from './postsSlice'\r\n\r\nexport const SinglePostPage = ({ match }) => {\r\n    const { postId } = match.params\r\n\r\n    const post = useSelector((state) => selectPostById(state, postId))\r\n\r\n    if (!post) {\r\n        return (\r\n            <section>\r\n                <h2>Post not found!</h2>\r\n            </section>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <article className=\"post\">\r\n                <h2>{post.title}</h2>\r\n                <div>\r\n                    <PostAuthor userId={post.user} />\r\n                    <TimeAgo timestamp={post.date} />\r\n                </div>\r\n                <p className=\"post-content\">{post.content}</p>\r\n                <ReactionButtons post={post} />\r\n                <Link to={`/editPost/${post.id}`} className=\"button\">\r\n                    Edit Post\r\n                </Link>\r\n            </article>\r\n        </section>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport { postUpdated, selectPostById } from './postsSlice'\r\n\r\nexport const EditPostForm = ({ match }) => {\r\n    const { postId } = match.params\r\n\r\n    const post = useSelector((state) => selectPostById(state, postId))\r\n\r\n    const [title, setTitle] = useState(post.title)\r\n    const [content, setContent] = useState(post.content)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    const onTitleChanged = (e) => setTitle(e.target.value)\r\n    const onContentChanged = (e) => setContent(e.target.value)\r\n\r\n    const onSavePostClicked = () => {\r\n        if (title && content) {\r\n            dispatch(postUpdated({ id: postId, title, content }))\r\n            history.push(`/posts/${postId}`)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <h2>Edit Post</h2>\r\n            <form>\r\n                <label htmlFor=\"postTitle\">Post Title:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"postTitle\"\r\n                    name=\"postTitle\"\r\n                    placeholder=\"What's on your mind?\"\r\n                    value={title}\r\n                    onChange={onTitleChanged}\r\n                />\r\n                <label htmlFor=\"postContent\">Content:</label>\r\n                <textarea\r\n                    id=\"postContent\"\r\n                    name=\"postContent\"\r\n                    value={content}\r\n                    onChange={onContentChanged}\r\n                />\r\n            </form>\r\n            <button type=\"button\" onClick={onSavePostClicked}>\r\n                Save Post\r\n            </button>\r\n        </section>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport const Navbar = () => {\r\n    return (\r\n        <nav>\r\n            <section>\r\n                <h1>Redux Essentials Example</h1>\r\n\r\n                <div className=\"navContent\">\r\n                    <div className=\"navLinks\">\r\n                        <Link to=\"/\">Posts</Link>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </nav>\r\n    )\r\n}","\nimport { PostsList } from './features/posts/PostsList'\nimport { AddPostForm } from './features/posts/AddPostForm'\nimport { CounterApp } from './features/counter/'\nimport { SinglePostPage } from './features/posts/SinglePostPage'\nimport { EditPostForm } from './features/posts/EditPostForm'\n\nimport React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from 'react-router-dom'\nimport { Navbar } from './app/NavBar'\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <div className=\"App\">\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <React.Fragment>\n                <AddPostForm />\n                <PostsList />\n              </React.Fragment>\n            )}\n          />\n          <Route\n            exact\n            path=\"/counter\"\n            render={() => (\n              <React.Fragment>\n                <CounterApp />\n              </React.Fragment>\n            )}\n          />\n          <Route exact path=\"/posts/:postId\" component={SinglePostPage} />\n          <Route exact path=\"/editPost/:postId\" component={EditPostForm} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import {\r\n    Server,\r\n    Model,\r\n    Factory,\r\n    belongsTo,\r\n    hasMany,\r\n    association,\r\n    RestSerializer,\r\n} from 'miragejs'\r\n\r\nimport { nanoid } from '@reduxjs/toolkit'\r\n\r\nimport faker from 'faker'\r\nimport { sentence, paragraph, article, setRandom } from 'txtgen'\r\nimport { parseISO } from 'date-fns'\r\nimport seedrandom from 'seedrandom'\r\n\r\nconst IdSerializer = RestSerializer.extend({\r\n    serializeIds: 'always',\r\n})\r\n\r\n// Set up a seeded random number generator, so that we get\r\n// a consistent set of users / entries each time the page loads.\r\n// This can be reset by deleting this localStorage value,\r\n// or turned off by setting `useSeededRNG` to false.\r\nlet useSeededRNG = true\r\n\r\nlet rng = seedrandom()\r\n\r\nif (useSeededRNG) {\r\n    let randomSeedString = localStorage.getItem('randomTimestampSeed')\r\n    let seedDate\r\n\r\n    if (randomSeedString) {\r\n        seedDate = new Date(randomSeedString)\r\n    } else {\r\n        seedDate = new Date()\r\n        randomSeedString = seedDate.toISOString()\r\n        localStorage.setItem('randomTimestampSeed', randomSeedString)\r\n    }\r\n\r\n    rng = seedrandom(randomSeedString)\r\n    setRandom(rng)\r\n    faker.seed(seedDate.getTime())\r\n}\r\n\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min)\r\n    max = Math.floor(max)\r\n    return Math.floor(rng() * (max - min + 1)) + min\r\n}\r\n\r\nconst randomFromArray = (array) => {\r\n    const index = getRandomInt(0, array.length - 1)\r\n    return array[index]\r\n}\r\n\r\nconst notificationTemplates = [\r\n    'poked you',\r\n    'says hi!',\r\n    `is glad we're friends`,\r\n    'sent you a gift',\r\n]\r\n\r\nnew Server({\r\n    routes() {\r\n        this.namespace = 'fakeApi'\r\n        this.timing = 2000\r\n\r\n        this.resource('users')\r\n        this.resource('posts')\r\n        this.resource('comments')\r\n\r\n        const server = this\r\n\r\n        this.post('/posts', function (schema, req) {\r\n            const data = this.normalizedRequestAttrs()\r\n            data.date = new Date().toISOString()\r\n            // Work around some odd behavior by Mirage that's causing an extra\r\n            // user entry to be created unexpectedly when we only supply a userId.\r\n            // It really want an entire Model passed in as data.user for some reason.\r\n            const user = schema.users.find(data.userId)\r\n            data.user = user\r\n\r\n            if (data.content === 'error') {\r\n                throw new Error('Could not save the post!')\r\n            }\r\n\r\n            const result = server.create('post', data)\r\n            return result\r\n        })\r\n\r\n        this.get('/posts/:postId/comments', (schema, req) => {\r\n            const post = schema.posts.find(req.params.postId)\r\n            return post.comments\r\n        })\r\n\r\n        this.get('/notifications', (schema, req) => {\r\n            const numNotifications = getRandomInt(1, 5)\r\n\r\n            let pastDate\r\n\r\n            const now = new Date()\r\n\r\n            if (req.queryParams.since) {\r\n                pastDate = parseISO(req.queryParams.since)\r\n            } else {\r\n                pastDate = new Date(now.valueOf())\r\n                pastDate.setMinutes(pastDate.getMinutes() - 15)\r\n            }\r\n\r\n            // Create N random notifications. We won't bother saving these\r\n            // in the DB - just generate a new batch and return them.\r\n            const notifications = [...Array(numNotifications)].map(() => {\r\n                const user = randomFromArray(schema.db.users)\r\n                const template = randomFromArray(notificationTemplates)\r\n                return {\r\n                    id: nanoid(),\r\n                    date: faker.date.between(pastDate, now).toISOString(),\r\n                    message: template,\r\n                    user: user.id,\r\n                    read: false,\r\n                    isNew: true,\r\n                }\r\n            })\r\n\r\n            return { notifications }\r\n        })\r\n    },\r\n    models: {\r\n        user: Model.extend({\r\n            posts: hasMany(),\r\n        }),\r\n        post: Model.extend({\r\n            user: belongsTo(),\r\n            comments: hasMany(),\r\n        }),\r\n        comment: Model.extend({\r\n            post: belongsTo(),\r\n        }),\r\n        notification: Model.extend({}),\r\n    },\r\n    factories: {\r\n        user: Factory.extend({\r\n            id() {\r\n                return nanoid()\r\n            },\r\n            firstName() {\r\n                return faker.name.firstName()\r\n            },\r\n            lastName() {\r\n                return faker.name.lastName()\r\n            },\r\n            name() {\r\n                return faker.name.findName(this.firstName, this.lastName)\r\n            },\r\n            username() {\r\n                return faker.internet.userName(this.firstName, this.lastName)\r\n            },\r\n\r\n            afterCreate(user, server) {\r\n                server.createList('post', 3, { user })\r\n            },\r\n        }),\r\n        post: Factory.extend({\r\n            id() {\r\n                return nanoid()\r\n            },\r\n            title() {\r\n                return sentence()\r\n            },\r\n            date() {\r\n                return faker.date.recent(7)\r\n            },\r\n            content() {\r\n                return article(1)\r\n            },\r\n            reactions() {\r\n                return {\r\n                    thumbsUp: 0,\r\n                    hooray: 0,\r\n                    heart: 0,\r\n                    rocket: 0,\r\n                    eyes: 0,\r\n                }\r\n            },\r\n            afterCreate(post, server) {\r\n                //server.createList('comment', 3, { post })\r\n            },\r\n\r\n            user: association(),\r\n        }),\r\n        comment: Factory.extend({\r\n            id() {\r\n                return nanoid()\r\n            },\r\n            date() {\r\n                return faker.date.past(2)\r\n            },\r\n            text() {\r\n                return paragraph()\r\n            },\r\n            post: association(),\r\n        }),\r\n    },\r\n    serializers: {\r\n        user: IdSerializer,\r\n        post: IdSerializer,\r\n        comment: IdSerializer,\r\n    },\r\n    seeds(server) {\r\n        server.createList('user', 3)\r\n    },\r\n})\r\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport { client } from '../../api/client'\r\n\r\nconst initialState = []\r\n\r\nexport const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {\r\n    const response = await client.get('/fakeApi/users')\r\n    return response.users\r\n})\r\n\r\nconst usersSlice = createSlice({\r\n    name: 'users',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: {\r\n        [fetchUsers.fulfilled]: (state, action) => {\r\n            return action.payload\r\n        },\r\n    },\r\n})\r\n\r\nexport default usersSlice.reducer\r\n","import { configureStore } from '@reduxjs/toolkit';\n  \n\nimport counterReducer from '../features/counter/counterSlice';\nimport postsReducer from '../features/posts/postsSlice'\nimport usersReducer from '../features/users/usersSlice'\n\nexport default configureStore({\n  reducer: {\n    counter: counterReducer,\n    posts: postsReducer,\n    users: usersReducer,\n  },\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport store from './app/store'\nimport { Provider } from 'react-redux'\n\nimport { fetchUsers } from './features/users/usersSlice'\n\nimport './api/server'\n\nstore.dispatch(fetchUsers())\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__1p9CU\",\"value\":\"Counter_value__25Ar_\",\"button\":\"Counter_button__3-q-t\",\"textbox\":\"Counter_textbox__3yllT\",\"asyncButton\":\"Counter_asyncButton__2XCS- Counter_button__3-q-t\"};"],"sourceRoot":""}